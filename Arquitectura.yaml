Resources:
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${AWS::StackName}-bucket-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: alias/aws/s3
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  BucketBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:  Bucket
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
          - Principal: '*'
            Action: '*'
            Effect: Deny
            Resource:
              -  Bucket.Arn
              -  ${Bucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: 'false'
  Function:
    Type: AWS::Serverless::Function
    Properties:
      Description: 
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: Function
      CodeUri: src/Function
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          TABLE_TABLE_NAME:  Table
          TABLE_TABLE_ARN:  Table.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName:  Table
      Events:
        ApiGET:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId:  Api
  FunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:  /aws/lambda/${Function}
  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  AutoshiftObserverNotificationStatus:
    Type: AWS::ARCZonalShift::AutoshiftObserverNotificationStatus
    Properties:
      Status: <String>
  VPC:
    Type: AWS::EC2::VPC
    Properties: {}
  Host:
    Type: AWS::EC2::Host
    Properties:
      AvailabilityZone: <String>
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: 
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: Api
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:  arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        SigningBehavior: <String>
        OriginAccessControlOriginType: <String>
        SigningProtocol: <String>
        Name: <String>
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: <String>
      MinSize: <String>
Transform: AWS::Serverless-2016-10-31
Metadata:
  AWS::Composer::Groups:
    Group:
      Label: Group
      Members:
        - VPC
        - AutoScalingGroup
        - Host
        - OriginAccessControl
        - AutoshiftObserverNotificationStatus
        - Bucket